/**
 */
package edu.kit.kastel.sdq.featuremodel.provider;

import edu.kit.kastel.sdq.featuremodel.util.FeaturemodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FeaturemodelItemProviderAdapterFactory extends FeaturemodelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FeaturemodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.FeatureDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureDiagramItemProvider featureDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.FeatureDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureDiagramAdapter() {
		if (featureDiagramItemProvider == null) {
			featureDiagramItemProvider = new FeatureDiagramItemProvider(this);
		}

		return featureDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.RequiresConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiresConstraintItemProvider requiresConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.RequiresConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiresConstraintAdapter() {
		if (requiresConstraintItemProvider == null) {
			requiresConstraintItemProvider = new RequiresConstraintItemProvider(this);
		}

		return requiresConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.ExcludesConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExcludesConstraintItemProvider excludesConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.ExcludesConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExcludesConstraintAdapter() {
		if (excludesConstraintItemProvider == null) {
			excludesConstraintItemProvider = new ExcludesConstraintItemProvider(this);
		}

		return excludesConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.MandatoryRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MandatoryRelationItemProvider mandatoryRelationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.MandatoryRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMandatoryRelationAdapter() {
		if (mandatoryRelationItemProvider == null) {
			mandatoryRelationItemProvider = new MandatoryRelationItemProvider(this);
		}

		return mandatoryRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.OptionalRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionalRelationItemProvider optionalRelationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.OptionalRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionalRelationAdapter() {
		if (optionalRelationItemProvider == null) {
			optionalRelationItemProvider = new OptionalRelationItemProvider(this);
		}

		return optionalRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.OrRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrRelationItemProvider orRelationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.OrRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrRelationAdapter() {
		if (orRelationItemProvider == null) {
			orRelationItemProvider = new OrRelationItemProvider(this);
		}

		return orRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.featuremodel.AlternativeRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlternativeRelationItemProvider alternativeRelationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.featuremodel.AlternativeRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlternativeRelationAdapter() {
		if (alternativeRelationItemProvider == null) {
			alternativeRelationItemProvider = new AlternativeRelationItemProvider(this);
		}

		return alternativeRelationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (featureDiagramItemProvider != null)
			featureDiagramItemProvider.dispose();
		if (featureItemProvider != null)
			featureItemProvider.dispose();
		if (requiresConstraintItemProvider != null)
			requiresConstraintItemProvider.dispose();
		if (excludesConstraintItemProvider != null)
			excludesConstraintItemProvider.dispose();
		if (mandatoryRelationItemProvider != null)
			mandatoryRelationItemProvider.dispose();
		if (optionalRelationItemProvider != null)
			optionalRelationItemProvider.dispose();
		if (orRelationItemProvider != null)
			orRelationItemProvider.dispose();
		if (alternativeRelationItemProvider != null)
			alternativeRelationItemProvider.dispose();
	}

}
